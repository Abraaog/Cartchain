from kazoo.client import KazooClient
import time
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)

class ZooKeeperCoordinator:
    def __init__(self, hosts="zoo1:2181,zoo2:2181,zoo3:2181"):
        # Removido connection_retry_delay que n√£o √© suportado no kazoo 2.8.0
        self.zk = KazooClient(hosts=hosts)
        self.zk.start(timeout=10)
        self.is_leader = False
        self.leader_path = "/cartorio/leader"
        self.node_id = None
        
        # Garantir que os caminhos existam
        self.zk.ensure_path("/cartorio")
        self.zk.ensure_path("/cartorio/nodes")
        self.zk.ensure_path("/cartorio/eleicao")

    def start_election(self, node_id):
        """Implementa√ß√£o manual de elei√ß√£o de l√≠der"""
        self.node_id = node_id
        
        def watch_leader(data):
            """Watch para mudan√ßas no l√≠der"""
            try:
                if data is None:
                    # L√≠der desapareceu, iniciar nova elei√ß√£o
                    print(f"‚ö†Ô∏è L√≠der desapareceu, iniciando nova elei√ß√£o")
                    self.elect_leader()
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no watch do l√≠der: {e}")

        def elect_leader():
            """Tenta se tornar l√≠der"""
            try:
                # Tenta criar o n√≥ do l√≠der (ephemeral)
                self.zk.create(self.leader_path, str(node_id).encode(), ephemeral=True)
                self.is_leader = True
                print(f"üöÄ N√≥ {node_id} tornou-se l√≠der")
                return True
            except Exception as e:
                # J√° existe um l√≠der
                self.is_leader = False
                # Obter quem √© o l√≠der atual
                try:
                    leader_id, stat = self.zk.get(self.leader_path, watch=watch_leader)
                    print(f"üìã N√≥ {node_id} reconhece l√≠der: {leader_id.decode()}")
                except Exception as e2:
                    print(f"‚ö†Ô∏è N√≥ {node_id} n√£o conseguiu identificar o l√≠der: {e2}")
                return False

        # Iniciar elei√ß√£o
        elect_leader()

    def register_node(self, node_id):
        try:
            self.zk.create(f"/cartorio/nodes/node_{node_id}", ephemeral=True)
            print(f"‚úÖ N√≥ {node_id} registrado no ZooKeeper")
        except Exception as e:
            print(f"‚ùå Erro ao registrar n√≥ {node_id}: {e}")

    def get_active_nodes(self):
        try:
            return self.zk.get_children("/cartorio/nodes")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao obter n√≥s ativos: {e}")
            return []