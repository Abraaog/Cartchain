import requests
import time
import json
import sys
import os
from datetime import datetime
import random
from colorama import init, Fore, Style
import docker  # <-- NOVA IMPORTA√á√ÉO

# Inicializar colorama para cores no terminal
init(autoreset=True)

class CartorioDigitalDemo:
    def __init__(self):
        self.nodes = ['http://localhost:5001', 'http://localhost:5002', 'http://localhost:5003']
        self.documentos_exemplo = [
            "Contrato de Aluguel - Im√≥vel na Rua das Flores, 123",
            "Escritura de Compra e Venda - Lote no Jardim Primavera",
            "Procura√ß√£o P√∫blica - Representa√ß√£o Legal",
            "Testamento Particular - Distribui√ß√£o de Bens",
            "Declara√ß√£o de Uni√£o Est√°vel - Reconhecimento de Sociedade de Fato",
            "Contrato Social - Constitui√ß√£o de Empresa",
            "Escritura de Doa√ß√£o - Bens Im√≥veis",
            "Registro de Marca - Propriedade Intelectual"
        ]
        self.cores = {
            'titulo': Fore.CYAN + Style.BRIGHT,
            'sucesso': Fore.GREEN + Style.BRIGHT,
            'erro': Fore.RED + Style.BRIGHT,
            'aviso': Fore.YELLOW + Style.BRIGHT,
            'info': Fore.BLUE + Style.BRIGHT,
            'destaque': Fore.MAGENTA + Style.BRIGHT
        }
        # --- NOVA L√ìGICA: INICIAR CLIENTE DOCKER ---
        try:
            self.docker_client = docker.from_env()
        except docker.errors.DockerException:
            self.print_status("ERRO: Docker n√£o est√° a correr ou n√£o foi encontrado. A simula√ß√£o de falha real ser√° desativada.", "erro")
            self.docker_client = None
    
    def print_banner(self):
        """Imprime o banner inicial"""
        print(f"""
{self.cores['titulo']}‚ïî{'‚ïê' * 80}‚ïó
‚ïë{'üèõÔ∏è  CART√ìRIO DIGITAL - DEMONSTRA√á√ÉO COMPLETA':^81}‚ïë
‚ï†{'‚ïê' * 80}‚ï£
‚ïë{'Sistema Distribu√≠do - Projeto de Sistemas Distribu√≠dos':^80}‚ïë
‚ïö{'‚ïê' * 80}‚ïù
{Style.RESET_ALL}""")
    
    def print_header(self, titulo, emoji="üìã"):
        """Imprime um cabe√ßalho formatado"""
        print(f"\n{self.cores['titulo']}{emoji} {titulo}")
        print(f"{self.cores['titulo']}{'‚ïê' * (len(titulo) + 2)}{Style.RESET_ALL}")
    
    def print_status(self, mensagem, tipo="info"):
        """Imprime mensagem com cor"""
        cor = self.cores.get(tipo, self.cores['info'])
        print(f"{cor}{mensagem}{Style.RESET_ALL}")
    
    def verificar_status_nos(self):
        """Verifica o status de todos os n√≥s"""
        self.print_header("STATUS DOS N√ìS DO SISTEMA", "üñ•Ô∏è")
        
        tabela = []
        for i, node_url in enumerate(self.nodes, 1):
            try:
                response = requests.get(f"{node_url}/status", timeout=2)
                if response.status_code == 200:
                    data = response.json()
                    lider = f"{self.cores['destaque']}üëë L√çDER" if data['is_leader'] else "‚ö™ Seguidor"
                    zk_status = f"{self.cores['sucesso']}‚úÖ Conectado" if data['zookeeper_connected'] else f"{self.cores['erro']}‚ùå Desconectado"
                    blockchain = f"üì¶ {data['chain_length']} blocos"
                    tabela.append([f"N√≥ {i}", lider, blockchain, zk_status])
                else:
                    tabela.append([f"N√≥ {i}", f"{self.cores['erro']}‚ùå Erro HTTP", "", ""])
            except requests.exceptions.RequestException:
                tabela.append([f"N√≥ {i}", f"{self.cores['erro']}‚ùå Offline", "", ""])
        
        # Imprimir tabela formatada
        print(f"{'N√≥':<10} {'Status':<25} {'Blockchain':<20} {'ZooKeeper':<25}")
        print("-" * 80)
        for linha in tabela:
            print(f"{linha[0]:<10} {linha[1]:<25} {linha[2]:<20} {linha[3]:<25}")
    
    def mostrar_blockchain(self, node_url=None):
        """Mostra a blockchain atual"""
        # Tenta encontrar um n√≥ online para pedir a blockchain
        if node_url is None:
            for url in self.nodes:
                try:
                    requests.get(f"{url}/status", timeout=1)
                    node_url = url
                    break
                except requests.exceptions.RequestException:
                    continue
        
        if node_url is None:
            self.print_status("‚ùå Nenhum n√≥ online para mostrar a blockchain.", "erro")
            return

        self.print_header("BLOCKCHAIN ATUAL", "üîó")
        try:
            response = requests.get(f"{node_url}/blockchain", timeout=5)
            if response.status_code == 200:
                blockchain = response.json()['chain']
                self.print_status(f"Total de blocos: {len(blockchain)}", "info")
                print()
                
                for block in blockchain:
                    print(f"{self.cores['destaque']}üì¶ BLOCO {block['index']}{Style.RESET_ALL}")
                    print(f"   Hash: {block['hash'][:20]}...")
                    print(f"   Timestamp: {datetime.fromtimestamp(block['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")
                    print(f"   Dados: {str(block['data'])[:60]}{'...' if len(str(block['data'])) > 60 else ''}")
                    print(f"   {'‚îÄ' * 60}")
            else:
                self.print_status(f"‚ùå Erro ao obter blockchain: {response.status_code}", "erro")
        except Exception as e:
            self.print_status(f"‚ùå Erro ao obter blockchain: {str(e)}", "erro")
    
    def registrar_documento(self, documento, tentativas=3):
        """Registra um documento no sistema"""
        self.print_status(f"üìù Registrando: {documento[:50]}...", "info")
        
        leader_node = None
        for tentativa in range(tentativas):
            for node_url in self.nodes:
                try:
                    response = requests.get(f"{node_url}/status", timeout=2)
                    if response.status_code == 200 and response.json()['is_leader']:
                        leader_node = node_url
                        break
                except requests.exceptions.RequestException:
                    continue
            if leader_node:
                break
            else:
                if tentativa < tentativas - 1:
                    self.print_status(f"‚è≥ Aguardando l√≠der... (tentativa {tentativa + 1}/{tentativas})", "aviso")
                    time.sleep(2)
        
        if leader_node:
            try:
                response = requests.post(
                    f"{leader_node}/register",
                    json={"document": documento},
                    timeout=10
                )
                if response.status_code == 201:
                    block_data = response.json()['block']
                    self.print_status("‚úÖ Documento registrado com sucesso!", "sucesso")
                    self.print_status(f"   üì¶ Bloco: {block_data['index']} | Hash: {block_data['hash'][:16]}...", "info")
                    self.print_status(f"   üèõÔ∏è  Processado por: N√≥ {leader_node.replace('http://', '')}", "destaque")
                    return True
                else:
                    self.print_status(f"‚ùå Erro ao registrar: {response.json().get('error', response.status_code)}", "erro")
                    return False
            except Exception as e:
                self.print_status(f"‚ùå Erro na requisi√ß√£o: {str(e)}", "erro")
                return False
        else:
            self.print_status("‚ùå Nenhum l√≠der encontrado ap√≥s todas as tentativas!", "erro")
            return False

    # --- FUN√á√ÉO DE SIMULA√á√ÉO DE FALHA ATUALIZADA ---
    def simular_falha_lider(self):
        """Simula a falha REAL do l√≠der e pergunta ao utilizador se quer reinici√°-lo."""
        self.print_header("SIMULA√á√ÉO DE FALHA DO L√çDER", "üö®")
        
        if not self.docker_client:
            self.print_status("Simula√ß√£o de falha real desativada. Docker n√£o est√° dispon√≠vel.", "erro")
            self.print_status("Apenas a fazer uma pausa de 5s.", "aviso")
            time.sleep(5)
            self.verificar_status_nos()
            return

        # 1. Identificar o l√≠der atual
        leader_id = None
        for i, node_url in enumerate(self.nodes, 1):
            try:
                response = requests.get(f"{node_url}/status", timeout=2)
                if response.status_code == 200 and response.json()['is_leader']:
                    leader_id = i
                    break
            except requests.exceptions.RequestException:
                continue

        if not leader_id:
            self.print_status("‚ùå N√£o foi poss√≠vel identificar o l√≠der atual para simular a falha.", "erro")
            return

        self.print_status(f"üëë L√≠der atual identificado: N√≥ {leader_id}", "info")
        
        # 2. Parar o contentor do l√≠der
        leader_container_name = f"cartorio-digital-node{leader_id}-1"
        try:
            self.print_status(f"üö® A parar o contentor Docker '{leader_container_name}' para simular uma falha...", "aviso")
            leader_container = self.docker_client.containers.get(leader_container_name)
            leader_container.stop()
            self.print_status(f"üõë Contentor '{leader_container_name}' parado.", "sucesso")
        except Exception as e:
            self.print_status(f"‚ùå Falha ao parar o contentor '{leader_container_name}': {e}", "erro")
            return

        # 3. Aguardar nova elei√ß√£o
        self.print_status("‚è≥ A aguardar 10 segundos para a elei√ß√£o de um novo l√≠der...", "aviso")
        time.sleep(10)

        # 4. Verificar o novo estado do sistema
        self.print_status("üìä A verificar o estado do sistema ap√≥s a falha:", "destaque")
        self.verificar_status_nos()

        # 5. Tentar registar um documento com o novo l√≠der
        self.print_status("\nüìù A tentar registar um documento de emerg√™ncia com o novo l√≠der:", "info")
        self.registrar_documento("DOCUMENTO DE EMERG√äNCIA - Registro ap√≥s falha do l√≠der")
        
        # 6. Perguntar ao utilizador se quer reiniciar o n√≥ que falhou
        resposta = input(f"\n{self.cores['aviso']}Deseja que o N√≥ {leader_id} (antigo l√≠der) volte a funcionar? (s/n): {Style.RESET_ALL}").lower()

        if resposta in ['s', 'sim']:
            try:
                self.print_status(f"\nüîÑ A reiniciar o N√≥ {leader_id}...", "info")
                leader_container.start()
                self.print_status("‚è≥ A aguardar 5 segundos para o n√≥ se juntar ao cluster como seguidor...", "aviso")
                time.sleep(5)
                self.print_status(f"‚úÖ N√≥ {leader_id} reiniciado com sucesso.", "sucesso")
            except Exception as e:
                self.print_status(f"‚ùå Falha ao reiniciar o contentor '{leader_container_name}': {e}", "erro")
        else:
            self.print_status(f"\n‚ÑπÔ∏è O N√≥ {leader_id} permanecer√° offline.", "info")
        
        # 7. Apresentar o estado final ap√≥s a decis√£o
        self.print_status("\nüìä Estado final do sistema ap√≥s a simula√ß√£o de falha:", "destaque")
        self.verificar_status_nos()

    def verificar_consistencia(self):
        """Verifica a consist√™ncia da blockchain em todos os n√≥s"""
        self.print_header("VERIFICA√á√ÉO DE CONSIST√äNCIA", "üîç")
        
        blockchains = {}
        self.print_status("üîç Verificando blockchain em todos os n√≥s:", "info")
        
        nodes_online = 0
        for i, node_url in enumerate(self.nodes, 1):
            try:
                response = requests.get(f"{node_url}/blockchain", timeout=5)
                if response.status_code == 200:
                    nodes_online += 1
                    blockchain = response.json()['chain']
                    blockchains[f'N√≥ {i}'] = {
                        'length': len(blockchain),
                        'last_hash': blockchain[-1]['hash'] if blockchain else None,
                    }
                    self.print_status(f"   ‚úÖ N√≥ {i}: {len(blockchain)} blocos", "sucesso")
                else:
                    self.print_status(f"   ‚ùå N√≥ {i}: Erro ao obter blockchain", "erro")
            except requests.exceptions.RequestException:
                 self.print_status(f"   ‚ùå N√≥ {i}: N√£o dispon√≠vel", "erro")
        
        # Verificar consist√™ncia
        self.print_status("\nüìä An√°lise de consist√™ncia:", "destaque")
        if nodes_online > 1:
            # Pegar os dados apenas dos n√≥s que responderam
            online_data = blockchains.values()
            lengths = {data['length'] for data in online_data}
            hashes = {data['last_hash'] for data in online_data}
            
            if len(lengths) == 1:
                self.print_status("   ‚úÖ Todos os n√≥s ONLINE t√™m a mesma quantidade de blocos", "sucesso")
            else:
                self.print_status("   ‚ö†Ô∏è N√≥s ONLINE t√™m quantidades diferentes de blocos!", "aviso")
            
            if len(hashes) == 1:
                self.print_status("   ‚úÖ Todos os n√≥s ONLINE t√™m o mesmo hash do √∫ltimo bloco", "sucesso")
            else:
                self.print_status("   ‚ö†Ô∏è N√≥s ONLINE t√™m hashes diferentes no √∫ltimo bloco! INCONSIST√äNCIA!", "erro")
        else:
            self.print_status("   ‚ÑπÔ∏è N√£o √© poss√≠vel verificar a consist√™ncia com menos de dois n√≥s online.", "info")

    def executar_demo_interativa(self):
        """Executa demonstra√ß√£o interativa com pausas"""
        self.print_banner()
        
        input(f"\n{self.cores['aviso']}Pressione ENTER para verificar o estado inicial do sistema...{Style.RESET_ALL}")
        self.verificar_status_nos()
        
        input(f"\n{self.cores['aviso']}Pressione ENTER para ver a blockchain inicial...{Style.RESET_ALL}")
        self.mostrar_blockchain()
        
        self.print_header("REGISTRANDO DOCUMENTOS DE EXEMPLO", "üìù")
        for i, documento in enumerate(self.documentos_exemplo, 1):
            input(f"\n{self.cores['aviso']}Pressione ENTER para registrar o documento {i}/{len(self.documentos_exemplo)}...{Style.RESET_ALL}")
            self.registrar_documento(documento)
            time.sleep(1)
        
        input(f"\n{self.cores['aviso']}Pressione ENTER para verificar a consist√™ncia dos dados...{Style.RESET_ALL}")
        self.verificar_consistencia()
        
        input(f"\n{self.cores['aviso']}Pressione ENTER para ver a blockchain final ap√≥s registros...{Style.RESET_ALL}")
        self.mostrar_blockchain()
        
        input(f"\n{self.cores['aviso']}Pressione ENTER para simular uma falha REAL do l√≠der...{Style.RESET_ALL}")
        self.simular_falha_lider()
        
        input(f"\n{self.cores['aviso']}Pressione ENTER para verificar a consist√™ncia final...{Style.RESET_ALL}")
        self.verificar_consistencia()

        self.print_header("DEMONSTRA√á√ÉO CONCLU√çDA! üéâ", "üéâ")
        print(f"\n{self.cores['sucesso']}Todos os conceitos foram demonstrados com sucesso!{Style.RESET_ALL}")

if __name__ == "__main__":
    demo = CartorioDigitalDemo()
    demo.executar_demo_interativa()

